'''
Генератор в Python — это объект, который позволяет поочередно возвращать значения,
вычисляемые в процессе итерации, вместо того чтобы сохранять их все в памяти.
Генераторы удобны для работы с большими объемами данных или бесконечными последовательностями.

Ключевые особенности генераторов:
- Экономия памяти: Генератор создает элементы "на лету", а не хранит их в памяти.

- Итерация с паузами: Выполнение функции-генератора приостанавливается при каждом yield и может быть продолжено.

- Итератор: Генератор является итератором, т.е. поддерживает методы __iter__() и __next__().

'''


# 1. Генератор через функцию и yield:
# Генератор определяется как функция, содержащая оператор yield.

def my_generator():
    yield 1
    yield 2
    yield 3


# Использование
gen = my_generator()
print(next(gen))  # 1
print(next(gen))  # 2
print(next(gen))  # 3
# StopIteration
# yield: приостанавливает выполнение функции и возвращает значение.
# next(): возобновляет выполнение функции до следующего yield.


# 2. Генераторное выражение:
# Короткий способ создания генератора, похожий на списковые включения, но с круглыми скобками.
gen = (x**2 for x in range(5))

for val in gen:
    print(val)


# 1. Генератор чисел Фибоначчи:
def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        yield a
        a, b = b, a + b


for num in fibonacci(10):
    print(num)

