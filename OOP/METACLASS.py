'''
Классы создают экземпляры объектов.
- Метаклассы создают сами классы.
- В Python классы — это тоже объекты, и их создание контролируется метаклассами.

Когда использовать метаклассы:

- Контроль структуры классов: Убедиться, что класс соответствует определённым требованиям
(например, содержит определённые методы или атрибуты).
- Автоматическое добавление функциональности: Например, декорирование методов или добавление новых атрибутов.
- Инструменты для ORM или фреймворков: Метаклассы часто используются для создания ORM (например, Django),
чтобы автоматически связывать классы с таблицами базы данных.

# Как объявить метакласс:
# Метакласс определяется как обычный класс, который наследуется от type.
'''


class MyMeta(type):
    def __new__(cls, name, bases, dct):
        print(f"Создаётся класс: {name}")
        if 'my_method' not in dct:
            raise TypeError(f"Класс {name} должен содержать метод my_method")
        else:
            return super().__new__(cls, name, bases, dct)


class MyClass(metaclass=MyMeta):
    def my_method(self):
        pass

# Если метод my_method отсутствует, возникнет ошибка


mu = MyClass()
print(dir(MyClass))
'''
Пример из реальной разработки:
В ORM, как Django, метаклассы используются для автоматического связывания классов Python с таблицами базы данных.'''


